// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package data

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PositionT struct {
	X float32 `json:"x"`
	Y float32 `json:"y"`
}

func (t *PositionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	PositionStart(builder)
	PositionAddX(builder, t.X)
	PositionAddY(builder, t.Y)
	return PositionEnd(builder)
}

func (rcv *Position) UnPackTo(t *PositionT) {
	t.X = rcv.X()
	t.Y = rcv.Y()
}

func (rcv *Position) UnPack() *PositionT {
	if rcv == nil {
		return nil
	}
	t := &PositionT{}
	rcv.UnPackTo(t)
	return t
}

type Position struct {
	_tab flatbuffers.Table
}

func GetRootAsPosition(buf []byte, offset flatbuffers.UOffsetT) *Position {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Position{}
	x.Init(buf, n+offset)
	return x
}

func FinishPositionBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPosition(buf []byte, offset flatbuffers.UOffsetT) *Position {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Position{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPositionBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Position) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Position) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Position) X() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Position) MutateX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *Position) Y() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Position) MutateY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func PositionStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func PositionAddX(builder *flatbuffers.Builder, x float32) {
	builder.PrependFloat32Slot(0, x, 0.0)
}
func PositionAddY(builder *flatbuffers.Builder, y float32) {
	builder.PrependFloat32Slot(1, y, 0.0)
}
func PositionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
